name: Record Stream

on:
  repository_dispatch:
    types: [record_stream]

jobs:
  record:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth google-auth-oauthlib python-dotenv

      - name: Install FFmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg

      - name: Check FFmpeg version
        run: ffmpeg -version

      - name: Create recordings directory
        run: mkdir -p recordings

      - name: Create service_account.json from secret
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}" > service_account.json

      - name: Record stream and upload to Google Drive
        env:
          STATION_NAME: ${{ github.event.client_payload.station_name }}
          STREAM_URL: ${{ github.event.client_payload.stream_url }}
          DURATION: ${{ github.event.client_payload.duration }}
          GDRIVE_FOLDER_ID: "1MkS_2E2K_f4yiOXvBWjp-XG-ZoMHLd1J"
        run: |
          timestamp=$(date +'%Y%m%d_%H%M%S')
          output_file="recordings/${STATION_NAME}_${timestamp}.mp3"
          echo "$output_file" > output_file_path.txt
          echo "📤 Uploading $output_file to Google Drive..."

          python3 <<EOF
import sys
sys.path.append('.github/workflows')
from google_drive_upload import retry_recording, authenticate_service_account, upload_file_to_drive

output_file = '${output_file}'
stream_url = '${STREAM_URL}'
duration = int('${DURATION}')
station_name = '${STATION_NAME}'
folder_id = '${GDRIVE_FOLDER_ID}'

try:
    # Try a quick, direct FFmpeg record stream
    success = False
    print(f"🎙️ Starting recording for {station_name}")
    print(f"📁 Output file: {output_file}")
    
    # Record stream
    def record_stream():
        print("🎧 Launching FFmpeg...")
        command = [
            "ffmpeg",
            "-y",
            "-loglevel", "info",  # Use 'debug' for even more
            "-i", stream_url,
            "-t", str(duration),
            "-c:a", "libmp3lame",
            "-b:a", "192k",
            output_file,
        ]
        try:
            with open("ffmpeg_error.log", "wb") as err_log:
                subprocess.run(command, stdout=subprocess.DEVNULL, stderr=err_log, timeout=duration + 30, check=True)
            print("✅ Recording finished.")
            return True
        except subprocess.TimeoutExpired:
            print("⏱️ FFmpeg timed out.")
            return False
        except subprocess.CalledProcessError:
            print("⚠️ FFmpeg returned a non-zero exit code.")
            return False

    success = record_stream()

    if not success:
        print("🔁 Trying retry_recording fallback...")
        success = retry_recording(output_file, stream_url, duration, station_name)

    if success:
        print("☁️ Authenticating to Google Drive...")
        service = authenticate_service_account()
        print("📤 Uploading file to Google Drive...")
        upload_file_to_drive(service, output_file, folder_id)
        print("✅ Done uploading.")
    else:
        raise Exception("❌ Recording failed after all attempts.")
except Exception as e:
    import traceback
    traceback.print_exc()
    raise
EOF

      - name: Debug - Show output file
        run: ls -lh recordings/
        
      - name: Upload FFmpeg error log (if present)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-error-log
          path: ffmpeg_error.log
